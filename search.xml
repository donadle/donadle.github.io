<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>code test</title>
      <link href="/2025/07/15/code-test/"/>
      <url>/2025/07/15/code-test/</url>
      
        <content type="html"><![CDATA[<p>这是一个简单python代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  ANN</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> neurolab <span class="keyword">as</span> nl</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> make_blobs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成 50 个二维样本，分为 2 类</span></span><br><span class="line">X, y = make_blobs(n_samples=<span class="number">50</span>, centers=<span class="number">2</span>, cluster_std=<span class="number">5</span>, random_state=<span class="number">42</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可视化生成的数据</span></span><br><span class="line">plt.figure()</span><br><span class="line">plt.scatter(X[:, <span class="number">0</span>], X[:, <span class="number">1</span>], c=y, cmap=<span class="string">&#x27;coolwarm&#x27;</span>, edgecolor=<span class="string">&#x27;k&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Generated Input Data&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;Dimension 1&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Dimension 2&#x27;</span>)</span><br><span class="line">plt.grid(<span class="literal">True</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调整标签形状以适配 neurolab</span></span><br><span class="line">y = y.reshape(-<span class="number">1</span>, <span class="number">1</span>).astype(<span class="built_in">float</span>)</span><br><span class="line"></span><br><span class="line">data = X</span><br><span class="line">labels = y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制输入数据散点图</span></span><br><span class="line">plt.figure()</span><br><span class="line">plt.scatter(data[:, <span class="number">0</span>], data[:, <span class="number">1</span>])</span><br><span class="line">plt.xlabel(<span class="string">&#x27;Dimension 1&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Dimension 2&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Input data&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置输入维度范围和输出数量</span></span><br><span class="line">dim1 = [<span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line">dim2 = [<span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line">num_output = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建感知机神经网络</span></span><br><span class="line">perceptron = nl.net.newp([dim1, dim2], num_output)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练模型</span></span><br><span class="line">error_progress = perceptron.train(data, labels, epochs=<span class="number">80</span>, show=<span class="number">20</span>, lr=<span class="number">0.03</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制训练误差曲线</span></span><br><span class="line">plt.figure()</span><br><span class="line">plt.plot(error_progress)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;Number of epochs&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Training error&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Training error progress&#x27;</span>)</span><br><span class="line">plt.grid()</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment">#  ANN</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> neurolab <span class="keyword">as</span> nl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载数据</span></span><br><span class="line">text = np.loadtxt(<span class="string">&#x27;data_simple_neural.txt&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提取输入特征和标签</span></span><br><span class="line">data = text[:, <span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line">labels = text[:, <span class="number">2</span>:<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制原始数据散点图</span></span><br><span class="line">plt.figure()</span><br><span class="line">plt.scatter(data[:, <span class="number">0</span>], data[:, <span class="number">1</span>])</span><br><span class="line">plt.xlabel(<span class="string">&#x27;Dimension 1&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Dimension 2&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Input data&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取输入维度范围</span></span><br><span class="line">dim1_min, dim1_max = data[:, <span class="number">0</span>].<span class="built_in">min</span>(), data[:, <span class="number">0</span>].<span class="built_in">max</span>()</span><br><span class="line">dim2_min, dim2_max = data[:, <span class="number">1</span>].<span class="built_in">min</span>(), data[:, <span class="number">1</span>].<span class="built_in">max</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 确定输出维度数量</span></span><br><span class="line">num_output = labels.shape[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">dim1=[dim1_min, dim1_max]</span><br><span class="line">dim2=[dim2_min, dim2_max]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建单层感知机网络</span></span><br><span class="line">nn = nl.net.newp([dim1,  dim2], num_output)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练网络</span></span><br><span class="line">error_progress = nn.train(data, labels, epochs=<span class="number">100</span>, show=<span class="number">20</span>, lr=<span class="number">0.03</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制训练误差曲线</span></span><br><span class="line">plt.figure()</span><br><span class="line">plt.plot(error_progress)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;Number of epochs&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Training error&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Training error progress&#x27;</span>)</span><br><span class="line">plt.grid()</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试结果</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\nTest results:&#x27;</span>)</span><br><span class="line">data_test = [[<span class="number">0.5</span>, <span class="number">3.2</span>],  [<span class="number">2.9</span>, <span class="number">0.1</span>], [<span class="number">1.1</span>, <span class="number">1.9</span>], [<span class="number">2.8</span>, <span class="number">2.8</span>]]</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> data_test:</span><br><span class="line">    <span class="built_in">print</span>(item, <span class="string">&#x27;-&gt;&#x27;</span>, nn.sim([item])[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#  ANN</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> neurolab <span class="keyword">as</span> nl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义数据范围和数量</span></span><br><span class="line">min_val = -<span class="number">20</span></span><br><span class="line">max_val = <span class="number">20</span></span><br><span class="line">num_points = <span class="number">150</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成输入数据并创建目标输出</span></span><br><span class="line">x = np.linspace(min_val, max_val, num_points)</span><br><span class="line">y = <span class="number">2</span> * np.square(x) + <span class="number">7</span></span><br><span class="line">y /= np.linalg.norm(y)  <span class="comment"># 归一化</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 准备训练数据</span></span><br><span class="line">data = x.reshape(num_points, <span class="number">1</span>)</span><br><span class="line">labels = y.reshape(num_points, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制输入数据</span></span><br><span class="line">plt.figure()</span><br><span class="line">plt.scatter(data, labels)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;Dimension 1&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Dimension 2&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Input data&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建神经网络</span></span><br><span class="line">nn = nl.net.newff([[min_val, max_val]], [<span class="number">10</span>, <span class="number">6</span>, <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置训练算法为梯度下降</span></span><br><span class="line">nn.trainf = nl.train.train_gd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练网络</span></span><br><span class="line">error_progress = nn.train(data, labels, epochs=<span class="number">1600</span>, show=<span class="number">100</span>, goal=<span class="number">0.001</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进行预测</span></span><br><span class="line">output = nn.sim(data)</span><br><span class="line">y_pred = output.reshape(num_points)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制训练误差进度</span></span><br><span class="line">plt.figure()</span><br><span class="line">plt.plot(error_progress)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;Number of epochs&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Error&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Training error progress&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建更密集的输入数据用于可视化预测结果</span></span><br><span class="line">x_dense = np.linspace(min_val, max_val, num_points * <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 预测密集数据</span></span><br><span class="line">y_dense_pred = nn.sim(x_dense.reshape(x_dense.size, <span class="number">1</span>)).reshape(x_dense.size)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制实际 vs 预测结果</span></span><br><span class="line">plt.figure()</span><br><span class="line">plt.plot(x_dense, y_dense_pred, <span class="string">&#x27;-&#x27;</span>, x, y, <span class="string">&#x27;.&#x27;</span>, x, y_pred, <span class="string">&#x27;p&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Actual vs predicted&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt. show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># RNN</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> neurolab <span class="keyword">as</span> nl</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_data</span>(<span class="params">num_points</span>):</span><br><span class="line">    wave_1 = <span class="number">0.49</span> * np.sin(np.arange(<span class="number">0</span>, num_points))</span><br><span class="line">    wave_2 = <span class="number">3.62</span> * np.sin(np.arange(<span class="number">0</span>, num_points))</span><br><span class="line">    wave_3 = <span class="number">1.2</span> * np.sin(np.arange(<span class="number">0</span>, num_points))</span><br><span class="line">    wave_4 = <span class="number">4.6</span> * np.sin(np.arange(<span class="number">0</span>, num_points))</span><br><span class="line"></span><br><span class="line">    amp_1 = np.ones(num_points)</span><br><span class="line">    amp_2 = <span class="number">2</span> + np.zeros(num_points)</span><br><span class="line">    amp_3 = <span class="number">3.1</span> * np.ones(num_points)</span><br><span class="line">    amp_4 = <span class="number">0.9</span> + np.zeros(num_points)</span><br><span class="line"></span><br><span class="line">    wave = np.array([wave_1, wave_2, wave_3, wave_4]).reshape(num_points * <span class="number">4</span>, <span class="number">1</span>)</span><br><span class="line">    amp = np.array([amp_1, amp_2, amp_3, amp_4]).reshape(num_points * <span class="number">4</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wave, amp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">visualize_output</span>(<span class="params">nn, num_points_test</span>):</span><br><span class="line">    wave, amp = get_data(num_points_test)</span><br><span class="line">    output = nn.sim(wave)</span><br><span class="line">    plt.plot(amp.reshape(num_points_test * <span class="number">4</span>))</span><br><span class="line">    plt.plot(output.reshape(num_points_test * <span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    num_points = <span class="number">50</span></span><br><span class="line">    wave, amp = get_data(num_points)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建 newelm 网络</span></span><br><span class="line">    nn = nl.net.newelm([[-<span class="number">3</span>, <span class="number">3</span>]] , [<span class="number">9</span>, <span class="number">1</span>], [nl.trans.TanSig(), nl.trans.PureLin()])</span><br><span class="line">    nn.layers[<span class="number">0</span>].initf = nl.init.InitRand([-<span class="number">0.1</span>, <span class="number">0.1</span>], <span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">    nn.layers[<span class="number">1</span>].initf = nl.init.InitRand([-<span class="number">0.1</span>, <span class="number">0.1</span>], <span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">    nn.init()</span><br><span class="line"></span><br><span class="line">    error_progress = nn.train(wave, amp, epochs=<span class="number">1200</span>, show=<span class="number">100</span>, goal=<span class="number">0.01</span>)</span><br><span class="line"></span><br><span class="line">    output = nn.sim(wave)</span><br><span class="line"></span><br><span class="line">    plt.subplot(<span class="number">221</span>)</span><br><span class="line">    plt.plot(error_progress)</span><br><span class="line">    plt.xlabel(<span class="string">&#x27;Number of Epochs&#x27;</span>)</span><br><span class="line">    plt.ylabel(<span class="string">&#x27;Error&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    plt.subplot(<span class="number">222</span>)</span><br><span class="line">    plt.plot(amp.reshape(num_points * <span class="number">4</span>))</span><br><span class="line">    plt.plot(output.reshape(num_points * <span class="number">4</span>))</span><br><span class="line">    plt.legend([<span class="string">&#x27;Original&#x27;</span>, <span class="string">&#x27;Predicted&#x27;</span>])</span><br><span class="line"></span><br><span class="line">    plt.subplot(<span class="number">223</span>)</span><br><span class="line">    visualize_output(nn, <span class="number">83</span>)</span><br><span class="line">    plt.xlim([<span class="number">0</span>, <span class="number">300</span>])</span><br><span class="line">    plt.subplot(<span class="number">224</span>)</span><br><span class="line">    visualize_output(nn, <span class="number">48</span>)</span><br><span class="line">    plt.xlim([<span class="number">0</span>, <span class="number">300</span>])</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># LSTM</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> neurolab <span class="keyword">as</span> nl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置参数</span></span><br><span class="line">input_file = <span class="string">&#x27;letter.data&#x27;</span></span><br><span class="line">num_datapoints = <span class="number">40</span></span><br><span class="line">orig_labels = <span class="string">&#x27;encode&#x27;</span>  <span class="comment"># 注意：这里保留原始字符串，不去除空格</span></span><br><span class="line">num_orig_labels = <span class="built_in">len</span>(orig_labels)</span><br><span class="line"></span><br><span class="line">num_train = <span class="built_in">int</span>(<span class="number">0.9</span> * num_datapoints)</span><br><span class="line">num_test = num_datapoints - num_train</span><br><span class="line">start = <span class="number">6</span></span><br><span class="line">end = -<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据容器</span></span><br><span class="line">data = []</span><br><span class="line">labels = []</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(input_file, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">            list_vals = line.strip().split(<span class="string">&#x27;\t&#x27;</span>)  <span class="comment"># 假设分隔符是 &#x27;&lt;&#x27;</span></span><br><span class="line">            <span class="keyword">if</span> list_vals[<span class="number">1</span>] <span class="keyword">not</span> <span class="keyword">in</span> orig_labels:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            label = np.zeros((num_orig_labels, <span class="number">1</span>))</span><br><span class="line">            label[orig_labels.index(list_vals[<span class="number">1</span>])] = <span class="number">1</span></span><br><span class="line">            labels.append(label)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 提取特征向量</span></span><br><span class="line">            cur_char = np.array([<span class="built_in">float</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> list_vals[start:end]])</span><br><span class="line">            data.append(cur_char)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(data) &gt;= num_datapoints:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 转换为 NumPy 数组</span></span><br><span class="line">    data = np.asfarray(data)</span><br><span class="line">    labels = np.array(labels).reshape(num_datapoints, num_orig_labels)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 神经网络配置</span></span><br><span class="line">    num_dims = <span class="built_in">len</span>(data[<span class="number">0</span>])</span><br><span class="line">    nn = nl.net.newff([[<span class="number">0</span>, <span class="number">1</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data[<span class="number">0</span>]))], [<span class="number">128</span>, <span class="number">16</span>, num_orig_labels])</span><br><span class="line">    nn.trainf = nl.train.train_gd</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 训练模型</span></span><br><span class="line">    error_progress = nn.train(data[:num_train, :], labels[:num_train, :],</span><br><span class="line">                              epochs=<span class="number">5000</span>, show=<span class="number">500</span>, goal=<span class="number">0.01</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 测试模型</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\nTesting on unknown data:&#x27;</span>)</span><br><span class="line">    predicted_test = nn.sim(data[num_train:, :])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num_test):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;\nOriginal:&#x27;</span>, orig_labels[np.argmax(labels[i])])</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Predicted:&#x27;</span>, orig_labels[np.argmax(predicted_test[i])])</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Error: File &#x27;<span class="subst">&#123;input_file&#125;</span>&#x27; not found.&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;An error occurred: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2025/07/15/hello-world/"/>
      <url>/2025/07/15/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
